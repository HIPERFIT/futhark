# NB: don't set `language: haskell` here
language: generic

sudo: required
dist: trusty

# See also https://github.com/hvr/multi-ghc-travis for more information

# The following lines enable several GHC versions and/or HP versions
# to be tested; often it's enough to test only against the last
# release of a major GHC version. Setting HPVER implictly sets
# GHCVER. Omit lines with versions you don't need/want testing for.
env:
 - CABALVER=1.18 GHCVER=7.8.2
 - CABALVER=1.18 GHCVER=7.8.3
 - CABALVER=1.18 GHCVER=7.8.4
 - CABALVER=1.22 GHCVER=7.10.1
 - CABALVER=1.22 GHCVER=7.10.2

# Note: the distinction between `before_install` and `install` is not
#       important.
before_install:
 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.cabal/bin:$PATH
 - travis_retry cabal update
 - travis_retry cabal install happy alex hlint
 - sudo apt-get install python-numpy # For testing futhark-py

cache:
  directories:
    - $HOME/.cabal
    - $HOME/.ghc

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - cabal install --only-dependencies --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 # -v2 provides useful information for debugging
 - cabal configure --enable-tests --enable-benchmarks -v2

 # this builds all libraries and executables
 # (including tests/benchmarks)
 - cabal build

 - cabal test
 - cabal check

 # tests that a source-distribution can be generated
 - cabal sdist

 # check that the generated source-distribution can be built & installed
 - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
   (cd dist && cabal install --force-reinstalls "$SRC_TGZ")

 - data/runtests.sh # Run integration test suite.
 - data/runtests.sh --compiler=futhark-py --exclude=no_python -c # Run integration test suite with Python code generator.
 - data/runtests.sh -t --exclude=no_opencl --compiler=futhark-pyopencl # Also test OpenCL code generation

 # Let us try checking out the benchmark suite for some more tests.
 - git clone https://github.com/HIPERFIT/futhark-benchmarks.git
 - (cd futhark-benchmarks && futhark-test --travis $(find . -name '*.fut') && futhark-test --travis -t --compiler=futhark-pyopencl $(find . -name '*.fut'))

 - tools/style-check.sh src # Check for style issues.
 - cabal haddock # Can we build the documentation?

# EOF
