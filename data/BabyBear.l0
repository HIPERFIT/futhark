
//////////////////////////////////////////////////
// SAC VERSION
//////////////////////////////////////////////////
//inline int[.,.] floydSbs1(int[.,.] D ) {
//    DT = transpose(D);
//    res = with
//        (. <= [i,j] <= .) :
//            min( D[i,j], minval( D[i] + DT[j]));
//        : modarray(D);
//    return( res);
//}



//////////////////////////////////////////////////
// C VERSION
//////////////////////////////////////////////////
//inline int* floydSbs1( int N, int* D ) {
//    do k = 1, N
//      do i = 1, N
//        do j = 1, N
//          D[i,j] = MIN(D[i,j], D[i,k] + D[k,j])
//        enddo
//      enddo
//    enddo

//////////////////////////////////////////////////
// C VERSION
//////////////////////////////////////////////////
//inline int* floydSbs1( int N, int* D ) {
//    do i = 1, N
//      do j = 1, N
//        minrow = 0;
//        do k = 1, N
//          minrow = MIN(minrow, D[i,k] + D[k,j])
//        enddo
//        D[i,j] = MIN(D[i,j], minrow)
//      enddo
//    enddo


fun int MIN(int a, int b) = if(a<b) then a else b

fun [int] min1([int] a, [int] b) = zipWith(MIN, a, b)


fun   int    redmin1( [int]  a) = reduce(MIN, 1200, a)
fun  [int]   redmin2([[int]] a) = map   (redmin1, a)

fun  [int]   plus1( [int]  a,  [int]  b) = zipWith(op +, a, b)
fun [[int]]  plus2([[int]] a, [[int]] b) = zipWith(plus1, a, b)

fun [[int]]  replin(int len, [int] a) = replicate(len, a)

fun [[int]] floydSbsFun(int N, [[int]] D ) =
    let D3  = replicate( N, transpose(D) ) in
    let D2  = map      ( replin(N),   D  ) in
    let abr = zipWith(plus2, D3, D2)       in
    let partial = map(redmin2, abr)        in
        zipWith(min1, partial, D) 

fun [[int]] floydSbsImp(int N, [[int]] D) = 
    let DT = transpose(D) in
    for i < N do
        for j < N do
            let sumrow = zipWith(op +, D[i], DT[j]) in    
            let minrow = reduce (MIN, 1200, sumrow)    in
            let minrow = MIN(D[i,j], minrow)        in
            let D[i,j] = minrow in D
        merge D
    merge D
            
fun ([[int]]*[[int]]) main() = 
    let arr = {{2,4,5}, {1,1000,3}, {3,7,1}} in
    //let x = write(transpose(arr)) 
    (floydSbsFun(3, arr), floydSbsImp(3, arr))


